// server/src/agents/index.ts
import { Cerebras } from "@cerebras/cerebras_cloud_sdk";
import { Agent, Tool } from "../../../shared/types.js";

export class AgentImplementation implements Agent {
  id: string;
  role: string;
  goal: string;
  backstory: string;
  llm: Cerebras | null;
  tools?: Tool[];
  verbose?: boolean;
  allowDelegation?: boolean;
  systemPrompt?: string;

  constructor(config: Omit<Agent, 'llm'> & { llm?: Cerebras }) {
    this.id = config.id;
    this.role = config.role;
    this.goal = config.goal;
    this.backstory = config.backstory;
    this.llm = config.llm || null;
    this.tools = config.tools || [];
    this.verbose = config.verbose || false;
    this.allowDelegation = config.allowDelegation || false;
    this.systemPrompt = config.systemPrompt || this.generateSystemPrompt();
  }

  private generateSystemPrompt(): string {
    return `You are a ${this.role} AI agent.

Role: ${this.role}
Goal: ${this.goal}
Backstory: ${this.backstory}

Your responsibilities:
- Focus on your specific role and expertise
- Provide detailed, actionable responses
- Consider the context from previous agents when available
- Maintain professional standards and best practices
- Be thorough and comprehensive in your analysis

Always respond with clear, structured output that the next agent or final user can immediately understand and act upon.`;
  }

  async execute(prompt: string, context?: string): Promise<string> {
    if (!this.llm) {
      // Fallback simulation mode
      return this.generateFallbackResponse(prompt);
    }

    try {
      const messages = [
        { role: "system" as const, content: this.systemPrompt! },
        ...(context ? [{ role: "user" as const, content: `Context from previous work:\n${context}` }] : []),
        { role: "user" as const, content: prompt }
      ];

      if (this.verbose) {
        console.log(`ü§ñ ${this.role} executing with prompt:`, prompt.substring(0, 100) + '...');
      }

      const response = await this.llm.chat.completions.create({
        messages,
        model: "llama3.1-70b",
        max_tokens: 4096,
        temperature: 0.7,
        stream: false
      });

      const content = (response as any).choices[0]?.message?.content || `${this.role} response generated`;
      
      if (this.verbose) {
        console.log(`‚úÖ ${this.role} completed execution`);
      }

      return content;
    } catch (error) {
      console.error(`‚ùå ${this.role} execution failed:`, error);
      return this.generateFallbackResponse(prompt);
    }
  }

  private generateFallbackResponse(prompt: string): string {
    return `# ${this.role} Analysis

I've analyzed your request and here's my professional assessment:

**Role:** ${this.role}
**Goal:** ${this.goal}

**Analysis:**
Based on the requirements provided, I recommend a structured approach that leverages modern best practices and industry standards. This ${this.role.toLowerCase()} perspective ensures that the solution will be robust, maintainable, and production-ready.

**Key Recommendations:**
1. Follow established patterns and conventions
2. Implement proper error handling and validation
3. Ensure scalability and performance optimization
4. Maintain code quality and documentation standards

**Next Steps:**
The analysis is complete and ready for the next phase of development. All recommendations align with current industry best practices and will contribute to a successful project outcome.

---
*Generated by ${this.role} Agent*`;
  }

  // Tool execution methods
  async useTool(toolName: string, ...args: any[]): Promise<any> {
    const tool = this.tools?.find(t => t.name === toolName);
    if (!tool) {
      throw new Error(`Tool '${toolName}' not found for agent '${this.role}'`);
    }
    
    if (this.verbose) {
      console.log(`üîß ${this.role} using tool: ${toolName}`);
    }
    
    return await tool.execute(...args);
  }

  // Get available tools
  getAvailableTools(): string[] {
    return this.tools?.map(t => t.name) || [];
  }
}

// Predefined agent configurations
export const createProductManagerAgent = (llm?: Cerebras): AgentImplementation => {
  return new AgentImplementation({
    id: "product_manager",
    role: "Product Manager",
    goal: "Analyze requirements and create comprehensive project specifications",
    backstory: "You are an experienced Product Manager with expertise in translating business requirements into technical specifications. You excel at breaking down complex requests, identifying edge cases, and creating clear, actionable project plans.",
    llm,
    verbose: true,
    systemPrompt: `You are an expert Product Manager AI. Your role is to:

1. Analyze software requirements thoroughly
2. Break down complex requests into clear, actionable specifications
3. Identify potential challenges and solutions
4. Create structured project plans with clear acceptance criteria
5. Define user stories and technical requirements

Always respond with clear, organized specifications that developers can immediately act upon. Include:
- Requirements analysis
- Technical specifications
- User stories
- Acceptance criteria
- Project timeline estimates
- Risk assessment

Focus on creating comprehensive documentation that serves as a foundation for the entire development process.`
  });
};

export const createSolutionArchitectAgent = (llm?: Cerebras): AgentImplementation => {
  return new AgentImplementation({
    id: "solution_architect",
    role: "Solution Architect",
    goal: "Design scalable system architecture and technical blueprints",
    backstory: "You are a seasoned Solution Architect with deep expertise in modern software architecture patterns, cloud technologies, and scalable system design. You excel at creating technical blueprints that are both robust and maintainable.",
    llm,
    verbose: true,
    systemPrompt: `You are an expert Solution Architect AI. Your role is to:

1. Design scalable and maintainable system architecture
2. Choose appropriate technologies and frameworks
3. Define data models and API specifications
4. Consider security, performance, and scalability requirements
5. Create detailed technical blueprints

Focus on modern best practices and production-ready solutions. Include:
- System architecture diagrams
- Technology stack recommendations
- API design specifications
- Database schema design
- Security considerations
- Performance optimization strategies
- Deployment architecture

Ensure all recommendations follow industry standards and best practices.`
  });
};

export const createSeniorDeveloperAgent = (llm?: Cerebras): AgentImplementation => {
  return new AgentImplementation({
    id: "senior_developer",
    role: "Senior Developer",
    goal: "Implement clean, production-ready code following best practices",
    backstory: "You are an expert Senior Developer with extensive experience in multiple programming languages and frameworks. You write clean, efficient, and maintainable code that follows industry best practices and coding standards.",
    llm,
    verbose: true,
    systemPrompt: `You are an expert Senior Developer AI. Your role is to:

1. Write clean, production-ready code
2. Follow best practices and coding standards
3. Implement proper error handling and validation
4. Create well-structured, maintainable solutions
5. Include necessary comments and documentation

Always provide complete, working code that can be immediately deployed. Include:
- Full implementation with proper structure
- Error handling and input validation
- Security best practices
- Performance optimizations
- Comprehensive comments and documentation
- Configuration and environment setup

Focus on code quality, maintainability, and production readiness.`
  });
};

export const createQAEngineerAgent = (llm?: Cerebras): AgentImplementation => {
  return new AgentImplementation({
    id: "qa_engineer",
    role: "QA Engineer",
    goal: "Create comprehensive test suites and ensure code quality",
    backstory: "You are an expert QA Engineer with deep knowledge of testing methodologies, automation frameworks, and quality assurance processes. You excel at creating thorough test strategies that catch issues early and ensure robust software delivery.",
    llm,
    verbose: true,
    systemPrompt: `You are an expert QA Engineer AI. Your role is to:

1. Write comprehensive test suites (unit, integration, e2e)
2. Identify edge cases and potential bugs
3. Ensure code quality and test coverage
4. Create test documentation and strategies
5. Verify that all requirements are fully met

Focus on thorough testing strategies that catch issues early. Include:
- Unit tests for all core functions
- Integration tests for API endpoints
- End-to-end test scenarios
- Performance and load testing considerations
- Security testing recommendations
- Test data management strategies
- Continuous integration setup

Ensure comprehensive coverage and quality gates for production deployment.`
  });
};

// Factory function to create all agents
export const createCodeGenerationAgents = (llm?: Cerebras): AgentImplementation[] => {
  return [
    createProductManagerAgent(llm),
    createSolutionArchitectAgent(llm),
    createSeniorDeveloperAgent(llm),
    createQAEngineerAgent(llm)
  ];
};

